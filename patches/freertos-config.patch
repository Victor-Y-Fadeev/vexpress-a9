--- FreeRTOS/Demo/CORTEX_A9_Zynq_ZC702/RTOSDemo/src/FreeRTOSConfig.h	2019-02-18 00:21:08.530272000 +0300
+++ ./FreeRTOSConfig.h	2019-05-19 15:36:36.015486949 +0300
@@ -25,10 +25,12 @@
  * 1 tab == 4 spaces!
  */
 
+#include <arm_plat.h>
+#include <timer/sp804.h>
+
 #ifndef FREERTOS_CONFIG_H
 #define FREERTOS_CONFIG_H
 
-#include "xparameters.h"
 
 /*-----------------------------------------------------------
  * Application specific definitions.
@@ -66,7 +68,7 @@
  * setting configMAX_API_CALL_INTERRUPT_PRIORITY 255 represents the lowest
  * priority.
  */
-#define configMAX_API_CALL_INTERRUPT_PRIORITY	18
+#define configMAX_API_CALL_INTERRUPT_PRIORITY	10
 
 #define configCPU_CLOCK_HZ						100000000UL
 #define configUSE_PORT_OPTIMISED_TASK_SELECTION	1
@@ -74,8 +76,8 @@
 #define configTICK_RATE_HZ						( ( TickType_t ) 1000 )
 #define configPERIPHERAL_CLOCK_HZ  				( 33333000UL )
 #define configUSE_PREEMPTION					1
-#define configUSE_IDLE_HOOK						1
-#define configUSE_TICK_HOOK						1
+#define configUSE_IDLE_HOOK						0
+#define configUSE_TICK_HOOK						0
 #define configMAX_PRIORITIES					( 7 )
 #define configMINIMAL_STACK_SIZE				( ( unsigned short ) 250 ) /* Large in case configUSE_TASK_FPU_SUPPORT is 2 in which case all tasks have an FPU context. */
 #define configTOTAL_HEAP_SIZE					( 125 * 1024 )
@@ -85,13 +87,20 @@
 #define configIDLE_SHOULD_YIELD					1
 #define configUSE_MUTEXES						1
 #define configQUEUE_REGISTRY_SIZE				8
-#define configCHECK_FOR_STACK_OVERFLOW			2
+#define configCHECK_FOR_STACK_OVERFLOW			0
 #define configUSE_RECURSIVE_MUTEXES				1
-#define configUSE_MALLOC_FAILED_HOOK			1
+#define configUSE_MALLOC_FAILED_HOOK			0
 #define configUSE_APPLICATION_TASK_TAG			0
 #define configUSE_COUNTING_SEMAPHORES			1
-#define configUSE_QUEUE_SETS					1
+#define configUSE_QUEUE_SETS					0
 #define configSUPPORT_STATIC_ALLOCATION			1
+#define configAPPLICATION_ALLOCATED_HEAP  1
+#define ucHeap _heap_start
+
+#define configGENERATE_RUN_TIME_STATS					0
+
+#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()
+#define portGET_RUN_TIME_COUNTER_VALUE() sp804_timestamp()
 
 /* Include the query-heap CLI command to query the free heap space. */
 #define configINCLUDE_QUERY_HEAP_COMMAND		1
@@ -101,28 +110,21 @@
 #define configMAX_CO_ROUTINE_PRIORITIES 		( 2 )
 
 /* Software timer definitions. */
-#define configUSE_TIMERS						1
+#define configUSE_TIMERS						0
 #define configTIMER_TASK_PRIORITY				( configMAX_PRIORITIES - 1 )
 #define configTIMER_QUEUE_LENGTH				5
 #define configTIMER_TASK_STACK_DEPTH			( configMINIMAL_STACK_SIZE * 2 )
 
-/* If configUSE_TASK_FPU_SUPPORT is set to 1 (or undefined) then each task will
-be created without an FPU context, and a task must call vTaskUsesFPU() before
-making use of any FPU registers.  If configUSE_TASK_FPU_SUPPORT is set to 2 then
-tasks are created with an FPU context by default, and calling vTaskUsesFPU() has
-no effect. */
-#define configUSE_TASK_FPU_SUPPORT				2
-
 /* Set the following definitions to 1 to include the API function, or zero
 to exclude the API function. */
 #define INCLUDE_vTaskPrioritySet				1
 #define INCLUDE_uxTaskPriorityGet				1
-#define INCLUDE_vTaskDelete						1
+#define INCLUDE_vTaskDelete						0
 #define INCLUDE_vTaskCleanUpResources			1
 #define INCLUDE_vTaskSuspend					1
 #define INCLUDE_vTaskDelayUntil					1
 #define INCLUDE_vTaskDelay						1
-#define INCLUDE_xTimerPendFunctionCall			1
+#define INCLUDE_xTimerPendFunctionCall			0
 #define INCLUDE_eTaskGetState					1
 #define INCLUDE_xTaskAbortDelay					1
 #define INCLUDE_xTaskGetTaskHandle				1
@@ -135,14 +137,6 @@
 FreeRTOS/Source/tasks.c for limitations. */
 #define configUSE_STATS_FORMATTING_FUNCTIONS	1
 
-/* The private watchdog is used to generate run time stats. */
-#include "xscuwdt.h"
-extern XScuWdt xWatchDogInstance;
-extern void vInitialiseTimerForRunTimeStats( void );
-#define configGENERATE_RUN_TIME_STATS 1
-#define portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() vInitialiseTimerForRunTimeStats()
-#define portGET_RUN_TIME_COUNTER_VALUE() ( ( 0xffffffffUL - XScuWdt_ReadReg( xWatchDogInstance.Config.BaseAddr, XSCUWDT_COUNTER_OFFSET ) ) >> 1 )
-
 /* The size of the global output buffer that is available for use when there
 are multiple command interpreters running at once (for example, one on a UART
 and one on TCP/IP).  This is done to prevent an output buffer being defined by
@@ -175,14 +169,11 @@
 void vConfigureTickInterrupt( void );
 #define configSETUP_TICK_INTERRUPT() vConfigureTickInterrupt()
 
-void vClearTickInterrupt( void );
-#define configCLEAR_TICK_INTERRUPT() vClearTickInterrupt()
-
 /* The following constant describe the hardware, and are correct for the
 Zynq MPU. */
-#define configINTERRUPT_CONTROLLER_BASE_ADDRESS 		( XPAR_PS7_SCUGIC_0_DIST_BASEADDR )
+#define configINTERRUPT_CONTROLLER_BASE_ADDRESS 		( A9_MPCORE_GIC_DIST )
 #define configINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET ( -0xf00 )
-#define configUNIQUE_INTERRUPT_PRIORITIES				32
+#define configUNIQUE_INTERRUPT_PRIORITIES				16
 
 
 
